/**
 * 面向对象编程：用对象的思想去写代码
 * 我们一直都在使用对象：数组Array，时间Date
 * 我们把系统自带的对象叫做系统对象，但是系统对象满足不了我们的需求，
 * 面向对象（OOP）的特点：
 * 抽象：抓住核心问题
 * 封装：只能通过对象来访问方法
 * 继承：从已有对象上继承出新的对象
 * 多态：多对象的不同形态
 * 
 * 对象的组成：
 * 方法（行为，操作）：---函数：过程，动态的
 * 属性：---变量：状态，静态的
 * 对象下面的变量：叫做对象的属性
 * 对象下面的函数：叫做对象的方法
 * 
 * 当new去调用一个函数时：这时函数中的this就是创建出来的对象，而且函数的返回值直接就是this（隐式返回，不写return的话默认返回this）
 * new后面调用的函数：叫做构造函数
 * 
 * 原型：去改写对象下面共用的方法或属性，让公用的方法或属性在内存中存在一份（好处：提高性能）
 * 类比：原型：css中的class（可复用）；普通方法：css中的style（style不能复用，优先级比class高）
 * 
 * 原型：prototype: 要写在构造函数的下面
 * 原型：能公用的方法或属性放在原型下，不能公用的属性不能放在原型下，一般对象的方法放在原型下（方法可以公用，如果不放在原型中的话，那么每次实例化一个对象都会重新创建一个方法，如果是在原型中写的话值和地址是一样的，不会创建多个），对象的属性放在构造函数中（因为属性不是公用的，按值引用）
 * 
 * 
 * 面向对象的使用：
 * function 构造函数(){
 *    this.属性
 * }
 * 构造函数.prototype.方法 = function(){
 * }
 * var obj1 = new 构造函数()
 * obj1.方法()
 * 
 * 对象的继承：
 * 在原有对象的基础上，略作修改，得到一个新的对象，不影响原有对象的功能
 * 继承是复用代码的一种形式
 * 继承：子类不影响父类，子类可以继承父类的一些功能（代码复用）
 * 属性的继承：调用父类的构造函数 call
 * 方法的继承：（对对象进行复制而不是引用）
 */